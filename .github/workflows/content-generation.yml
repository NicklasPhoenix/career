name: Automated Content Generation
on:
  schedule:
    # Run every Monday and Thursday at 10 AM UTC (good for SEO)
    - cron: '0 10 * * 1,4'
  workflow_dispatch:  # Allow manual trigger
    inputs:
      content_type:
        description: 'Type of content to generate'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - blog_post
        - guide
        - tool_page
      force_generation:
        description: 'Force generation even if recent content exists'
        required: false
        default: false
        type: boolean

jobs:
  pre-generation-check:
    runs-on: ubuntu-latest
    outputs:
      should_generate: ${{ steps.check.outputs.should_generate }}
      content_stats: ${{ steps.stats.outputs.stats }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Check content freshness
        id: check
        run: |
          echo "üîç Checking content freshness..."
          
          python3 << 'EOF'
          import os
          import json
          from datetime import datetime, timedelta
          
          # Check recent content
          blog_files = [f for f in os.listdir('blog') if f.endswith('.html') and f != 'index.html']
          recent_content = []
          
          week_ago = datetime.now() - timedelta(days=7)
          
          for file in blog_files:
              filepath = os.path.join('blog', file)
              mod_time = datetime.fromtimestamp(os.path.getmtime(filepath))
              if mod_time >= week_ago:
                  recent_content.append(file)
          
          force_generation = "${{ github.event.inputs.force_generation }}" == "true"
          manual_trigger = "${{ github.event_name }}" == "workflow_dispatch"
          
          should_generate = True
          reason = "Scheduled generation"
          
          if len(recent_content) >= 2 and not force_generation:
              should_generate = False
              reason = f"Recent content exists ({len(recent_content)} files in last 7 days)"
          elif manual_trigger:
              should_generate = True
              reason = "Manual trigger"
          elif force_generation:
              should_generate = True
              reason = "Forced generation"
          
          print(f"Decision: {'GENERATE' if should_generate else 'SKIP'}")
          print(f"Reason: {reason}")
          print(f"Recent content files: {len(recent_content)}")
          
          # Set output
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"should_generate={str(should_generate).lower()}\n")
              f.write(f"reason={reason}\n")
          EOF
          
      - name: Content statistics
        id: stats
        run: |
          echo "üìä Generating content statistics..."
          
          python3 << 'EOF'
          import os
          import json
          from datetime import datetime
          
          stats = {
              "blog_posts": len([f for f in os.listdir('blog') if f.endswith('.html') and f != 'index.html']),
              "guide_pages": len([f for f in os.listdir('guides') if f.endswith('.html') and f != 'index.html']),
              "tool_pages": len([f for f in os.listdir('tools') if f.endswith('.html') and f != 'index.html']),
              "last_check": datetime.now().isoformat(),
              "total_content": 0
          }
          
          stats["total_content"] = stats["blog_posts"] + stats["guide_pages"] + stats["tool_pages"]
          
          print(f"Content inventory:")
          print(f"  Blog posts: {stats['blog_posts']}")
          print(f"  Guide pages: {stats['guide_pages']}")
          print(f"  Tool pages: {stats['tool_pages']}")
          print(f"  Total content: {stats['total_content']}")
          
          # Set output
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"stats={json.dumps(stats)}\n")
          EOF

  generate-content:
    runs-on: ubuntu-latest
    needs: pre-generation-check
    if: needs.pre-generation-check.outputs.should_generate == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          echo "‚úÖ Python environment ready"
      
      - name: Pre-generation backup
        run: |
          echo "üíæ Creating backup of current content..."
          
          # Create backup directory with timestamp
          BACKUP_DIR=".backup/$(date '+%Y%m%d_%H%M%S')"
          mkdir -p "$BACKUP_DIR"
          
          # Backup key files
          cp -r blog "$BACKUP_DIR/" 2>/dev/null || true
          cp sitemap.xml "$BACKUP_DIR/" 2>/dev/null || true
          
          echo "‚úÖ Backup created at $BACKUP_DIR"
      
      - name: Generate new content
        id: generation
        run: |
          echo "üöÄ Starting content generation..."
          echo "üìÖ Date: $(date '+%Y-%m-%d %H:%M:%S')"
          
          # Set content type
          CONTENT_TYPE="${{ github.event.inputs.content_type || 'auto' }}"
          echo "üéØ Content type: $CONTENT_TYPE"
          
          # Run content generation with error handling
          if python content_automation.py --type="$CONTENT_TYPE"; then
            echo "‚úÖ Content generation completed successfully"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Content generation failed"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Validate generated content
        if: steps.generation.outputs.success == 'true'
        run: |
          echo "üîç Validating generated content..."
          
          python3 << 'EOF'
          import os
          import re
          from datetime import datetime
          
          # Check what was generated
          blog_files = [f for f in os.listdir('blog') if f.endswith('.html') and f != 'index.html']
          
          # Find newest file (likely just generated)
          newest_file = None
          newest_time = 0
          
          for file in blog_files:
              filepath = os.path.join('blog', file)
              mod_time = os.path.getmtime(filepath)
              if mod_time > newest_time:
                  newest_time = mod_time
                  newest_file = file
          
          if newest_file:
              print(f"üìÑ Newest content: {newest_file}")
              
              # Basic content validation
              with open(os.path.join('blog', newest_file), 'r') as f:
                  content = f.read()
              
              # Check for basic HTML structure
              has_title = bool(re.search(r'<title[^>]*>.*?</title>', content, re.IGNORECASE))
              has_h1 = bool(re.search(r'<h1[^>]*>.*?</h1>', content, re.IGNORECASE))
              has_meta_desc = bool(re.search(r'<meta[^>]*name=["\']description["\']', content, re.IGNORECASE))
              
              word_count = len(re.findall(r'\b\w+\b', re.sub(r'<[^>]+>', '', content)))
              
              print(f"üìä Content validation:")
              print(f"  ‚úÖ Has title tag: {has_title}")
              print(f"  ‚úÖ Has H1 tag: {has_h1}")
              print(f"  ‚úÖ Has meta description: {has_meta_desc}")
              print(f"  üìù Word count: {word_count}")
              
              # Quality thresholds
              min_words = 500
              if word_count < min_words:
                  print(f"‚ö†Ô∏è  Warning: Content may be too short ({word_count} < {min_words} words)")
              
              if not (has_title and has_h1):
                  print("‚ùå Content validation failed - missing required elements")
                  exit(1)
              
              print("‚úÖ Content validation passed")
          else:
              print("‚ö†Ô∏è  No new content file detected")
          EOF
      
      - name: Check for changes
        id: changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "üìã Changes detected:"
            git status --short
            
            # Count changes by type
            NEW_FILES=$(git status --porcelain | grep "^??" | wc -l)
            MODIFIED_FILES=$(git status --porcelain | grep "^ M" | wc -l)
            
            echo "change_summary=New: $NEW_FILES, Modified: $MODIFIED_FILES" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  No changes to commit"
          fi
      
      - name: Quality assurance check
        if: steps.changes.outputs.changes == 'true'
        run: |
          echo "üîç Running quality assurance checks..."
          
          # Check sitemap is valid XML
          python3 -c "
          import xml.etree.ElementTree as ET
          try:
              ET.parse('sitemap.xml')
              print('‚úÖ Sitemap XML is valid')
          except ET.ParseError as e:
              print(f'‚ùå Sitemap XML error: {e}')
              exit(1)
          "
          
          # Check blog index was updated
          if [ -f "blog/index.html" ]; then
            BLOG_COUNT=$(find blog -name "*.html" -not -name "index.html" | wc -l)
            if grep -q "article" blog/index.html; then
              echo "‚úÖ Blog index appears updated"
            else
              echo "‚ö†Ô∏è  Blog index may not be properly updated"
            fi
          fi
          
          echo "‚úÖ Quality assurance passed"
      
      - name: Commit and push changes
        if: steps.changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Content Bot"
          
          # Add all changes
          git add .
          
          # Get content stats for commit message
          BLOG_COUNT=$(find blog -name "*.html" -not -name "index.html" | wc -l)
          CONTENT_TYPE="${{ github.event.inputs.content_type || 'auto' }}"
          
          # Create detailed commit message
          COMMIT_MSG="ü§ñ Automated content generation - $(date '+%Y-%m-%d')

          üìä Content Update Summary:
          ‚Ä¢ Type: $CONTENT_TYPE
          ‚Ä¢ Total blog articles: $BLOG_COUNT
          ‚Ä¢ Changes: ${{ steps.changes.outputs.change_summary }}
          
          üîÑ Updates:
          - Generated new SEO-optimized content
          - Updated blog index with latest articles  
          - Refreshed sitemap.xml for search engines
          
          ü§ñ Generated with automated content system
          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          git commit -m "$COMMIT_MSG"
          git push
          
          echo "‚úÖ Changes committed and pushed to main branch"
      
      - name: Post-generation cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up temporary files..."
          
          # Clean up old backups (keep last 5)
          if [ -d ".backup" ]; then
            cd .backup
            ls -1t | tail -n +6 | xargs -r rm -rf
            cd ..
          fi
          
          echo "‚úÖ Cleanup completed"
      
      - name: Generate comprehensive summary
        if: always()
        run: |
          echo "üìä Content Generation Report"
          echo "=============================="
          echo "üïê Execution time: $(date)"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üéØ Content type: ${{ github.event.inputs.content_type || 'auto' }}"
          echo "üîÑ Trigger: ${{ github.event_name }}"
          
          if [ "${{ needs.pre-generation-check.outputs.should_generate }}" = "true" ]; then
            if [ "${{ steps.changes.outputs.changes }}" = "true" ]; then
              echo "‚úÖ Status: SUCCESS - New content generated and committed"
              echo "üìà Changes: ${{ steps.changes.outputs.change_summary }}"
            else
              echo "‚ö†Ô∏è  Status: COMPLETED - No changes detected"
            fi
          else
            echo "‚è≠Ô∏è  Status: SKIPPED - Content generation not needed"
          fi
          
          # Final content inventory
          BLOG_COUNT=$(find blog -name "*.html" -not -name "index.html" | wc -l)
          GUIDE_COUNT=$(find guides -name "*.html" -not -name "index.html" | wc -l)
          TOOL_COUNT=$(find tools -name "*.html" -not -name "index.html" | wc -l)
          
          echo ""
          echo "üìà Current Content Inventory:"
          echo "   ‚Ä¢ Blog articles: $BLOG_COUNT"
          echo "   ‚Ä¢ Guide pages: $GUIDE_COUNT"
          echo "   ‚Ä¢ Tool pages: $TOOL_COUNT"
          echo "   ‚Ä¢ Total content: $((BLOG_COUNT + GUIDE_COUNT + TOOL_COUNT))"
          
          echo ""
          echo "üîó Site URL: https://nicklasphoenix.github.io/career/"
          echo "üìä Next generation: $(date -d '+3 days' '+%Y-%m-%d')"

  skip-generation:
    runs-on: ubuntu-latest
    needs: pre-generation-check
    if: needs.pre-generation-check.outputs.should_generate == 'false'
    steps:
      - name: Report skip reason
        run: |
          echo "‚è≠Ô∏è  Content generation skipped"
          echo "üìä Current stats: ${{ needs.pre-generation-check.outputs.content_stats }}"
          echo "üîÑ Next scheduled run: $(date -d '+3 days' '+%Y-%m-%d 10:00 UTC')"
